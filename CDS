//////////////////////////////////// ANNOTAIONS IN CDS
@AbapCatalog.sqlViewName: 'ZCDS_SQL1'   --Normal View
@AccessControl.authorizationCheck: #CHECK --Authorization Check
@EndUserText.label: 'Simple CDS View'   --CDS Description
@AbapCatalog.buffering.status: #ACTIVE
@AbapCatalog.buffering.type: #SINGLE
@ClientHandling.type: #INHERITED --Automatic Client Handling
define view ZCDS_DDL1 as 
select from sbook
{
    carrid as airline_code,
    connid as airline_number,
    fldate as flight_date,
    bookid as booking_number,
    customid as cutomre_number,
    @Semantics.amount.currencyCode: 'local_currency'    
    loccuram as local_currency_amount,
    @Semantics.currencyCode: true
    loccurkey as local_currency
}





//////////////////////////////////// CASE Expressions in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SLQ2'
@EndUserText.label: 'CASE Expressions'
define view ZCDS_DDL2
  as select from sbook
{
  carrid   as airline_code,
  bookid   as booking_number,
  customid as cutomer_number,
  custtype as customer_type,
  smoker   as smoker,
  loccuram as booking_amount,

  case smoker
      when 'X' then loccuram + 100
      else loccuram
  end      as inc_smoker_charge_1,

  case
      when smoker = 'X' and custtype = 'B' then loccuram + 200
      when smoker = 'X' and custtype = 'P' then loccuram + 100
      else loccuram
  end      as inc_smoker_charge_2,

  case smoker
      when ' ' then loccuram
      else
          case
              when smoker = 'X' and custtype = 'B' then loccuram + 200
              when smoker = 'X' and custtype = 'P' then loccuram + 100
              else loccuram
          end
   end as inc_smoker_charge_3

}





///////////////////////////////////// Arithmetic Expression in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SLQ3'
@EndUserText.label: 'Arithmetic Expression'
define view ZCDS_DDL3 as 
select from sbook
{
    carrid as airline_code,
    bookid as booking_number,
    fldate as flight_date,
    loccuram as booking_amount,
    
    100 as additional_charge,
    loccuram + 100 as new_booking_amount,
    ceil(loccuram + 100) as rounded_new_booking_amount,
    cast(loccuram as abap.fltp) - cast(loccuram as abap.fltp) * 0.30 as discounted_booking_amount,
    
    concat_with_space(carrid, bookid, 1) as booking_info,
    
    currency_conversion(amount => loccuram, 
                        source_currency => loccurkey, 
                        target_currency => cast('EUR' as abap.cuky( 5 ) ), 
                        exchange_rate_date => fldate ) as euro_booking_amount
    
}





//////////////////////////////////// Aggregation Expression in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SQL4'
@EndUserText.label: 'Aggregation Expression'
define view ZCDS_DDL4 as 
select from sbook
{
    carrid as airline_code,
    count(*) as number_of_records,
    count(distinct loccuram) as distinct_records,
    min(loccuram) as min_booking_amount,
    max(loccuram) as max_booking_amount,
    avg(loccuram) as avg_booking_amount,
    sum(loccuram) as total_booking_amount
    
}
group by carrid
having carrid = 'UA'




///////////////////////////////////////// Nested JOINS in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SQL5'
@EndUserText.label: 'Joins in CDS'
define view ZCDS_DDL5 as select from scarr as c   --Nested Joins
inner join (
                sbook as a 
                inner join scustom as b
                on a.customid = b.id
           )
           on c.carrid = a.carrid
{
    a.carrid,
    a.connid,
    a.fldate,
    a.bookid,
    a.customid,
    b.name,
    b.email,
    c.carrname
}
where a.customid = '00000001'




///////////////////////////////////// UNION in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SQL6'
@EndUserText.label: 'Union in CDS'
define view ZCDS_DDL6 as select from sbook
{
    customid
}
where customid = '00000001'

union 

select from scustom
{
    id as customid
}
where id = '00000001'





//////////////////////////////////////////// PARAMETERS in CDS
@AbapCatalog.sqlViewName: 'ZCDS_SQL7'
@EndUserText.label: 'Parameters in CDS'
define view ZCDS_DDL7 
    with parameters smoker_factor : abap.curr( 15, 2 ),
                    non_smoker_factor : s_l_cur_pr,
                    @Environment.systemField: #SYSTEM_DATE --To provide sytem field value in below paramter if it is not provided by user
                    flight_date : abap.dats 
                    
as select from sbook
{
    carrid as airline,
    loccuram as amount,
    smoker,
    case smoker
         when 'X' then loccuram * $parameters.smoker_factor 
         else loccuram * :non_smoker_factor
     end as adjsuted_amount,
     fldate
}
where fldate between '20180615' and :flight_date 




